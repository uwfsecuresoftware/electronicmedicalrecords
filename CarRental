/********************************
*Hunter Heeke
*COP 3014
*Project 6
*******************************/

#include <stdio.h>
#include <string.h>

#define true 1

typedef struct {
   int    carId;      // a unique ID of a car
   char   make[20];   // make of the car
   char   model[20];  // model of the car
   int    numDoors;   // 2 or 4 door cars
   double rate;       // the rental rate of the car
} CarT;

typedef struct {
   char renterName[20]; // name of the renter
   int  daysRenting;    // days renting the car
   int  carId;          // ID of the car rented
} RentalT;

//fprintfs everything in allRentals into rental.txt 
//allRentals is the structure of rentals
//filename is = argv[1]
//totalRentals is the total number of rentals stored
void writeRentals ( char *filename, RentalT *allRentals, int totalRentals );

//fscans everything in rental.txt into allRentals 
//filename is = argv[1]
//allRentals is the structure of rentals
int readRentals (char *filename, RentalT *allRentals );

//fprintfs everything in allCars into cars.txt 
//allCars is the structure of cars
//filename is = argv[2]
//totalCars is the total number of cars stored
void writeCars ( char *filename, CarT *allCars, int totalCars );

//fscanfs everything in cars.txt into  allCars
//allCars is the structure of cars
//filename is = argv[2]
int readCars (char *filename, CarT *allCars );

// Prints a menu to the screen.
void printMenu();

// Handles finding a reservation. It prompts the user to enter a renter name.
//  allCars - a list of cars
//  totalCars - the number of cars in the inventory
//  allRentals - a list of car rentals
//  totalRentals - the number of car rentals
void handleFindReservation ( CarT *allCars, int totalCars, RentalT *allRentals, int totalRentals );

// Handles printing information about a selected car. It prompts the user for a car Id.
//  allCars - a list of cars
//  totalCars - the number of cars in the inventory
void handlePrintCarInfo ( CarT *allCars, int totalCars );

// Create a new inventory.
//  allCars - a list of cars
// Returns the number of cars in the inventory
int createInventory ( CarT *allCars );

// Adds new car to the inventory.
//  allCars - a list of cars
//  totalCars - the number of cars in the inventory
//  size - the size of the list
// Returns the new number of cars in the inventory or -1 if the new 
// total number of cars exceeds the size of the array.
int addNewCar ( CarT *allCars, int totalCars, int size );

// Creates a new record in the list of rentals.
//  allCars - a list of cars
//  totalCars - the number of cars in the inventory
//  allRentals - a list of car rentals
//  totalRentals - the number of car rentals
//  size - the size of the list
// Returns the new number of rentals or -1 if the new total number
// of rentals exceeds the size of the array.
int addNewRental ( CarT *allCars,
                   int totalCars,
                   RentalT *allRentals,
			       int totalRentals, 
                   int size );

// Finds a car id by the car name (make).
//  allCars - a list of cars
//  totalCars - the number of cars in the inventory
//  carMake - the make of the car
// Returns the ID of the car in the array that matches the given make
// of the car or -1 if no car matches the given make.
int findCarIDByName ( CarT *allCars, 
                      int totalCars, 
                      char *carMake );

// Find a car reservation among all reservations.
//  allRentals - a list of car rentals
//  totalRentals - the number of car rentals
//  renterName - the name of the renter
// Returns the index of the rental reservation given a renter name.
int findReservation ( RentalT *allRentals, 
                      int totalRentals, 
                      char *renterName );

// Finds a car by a given car id.
//  allCars - a list of cars
//  totalCars - the number of cars in the inventory
//  carId - the Id of a car	
// Returns the index of the car in the list matching the given car ID
// or -1 if no car matches the given car ID.
int findCarById ( CarT *allCars, 
                  int totalCars, 
                  int carId );

// Prints all car rental records to the screen.
//  allRentals - a list of car rentals
//  totalRentals - the number of car rentals
//  allCars - a list of cars
//  totalCars - the number of cars in the inventory
void printAllRentals  (RentalT *allRentals, 
                       int totalRentals,
					   CarT *allCars,
					   int totalCars);

// Prints car informations to the screen.
//  allCars - a list of cars
//  totalCars - the number of cars in the inventory				   
void printCarInfo ( CarT *allCars, 
                    int totalCars,
                    int carId );

// Computes average days of car rentals.
//  allRentals - a list of car rentals
//  totalRentals - the number of car rentals
// Returns the average rental days or -1 if no car has been rented.					
double getAverageRentalDays  (RentalT *allRentals, 
                              int totalRentals );
                              
void handleSelection ( int choice, CarT *allCars, int *totalCars, RentalT *allRentals, int *totalRentals);


int main (  int argc, char *argv[] ){

   CarT    allCars[20];    // a list of cars
   RentalT allRentals[60]; // a list of rentals
   int     totalCars=0;      // number of all cars owned
   int     totalRentals=0;   // number of rented cars
   int     choice;
   
	// cars and rentals read in 
   totalCars = readCars (argv[2], allCars );
	totalRentals = readRentals (argv[1], allRentals );
   printf("\n%d,%d\n", totalCars, totalRentals);
   
	
   while ( true ) {
      printMenu();
      printf ("Choose option: ");
      scanf ("%d", &choice);
      printf ("\n");
   	
      if (choice == 7)
         break;
   		
      handleSelection (choice, allCars, &totalCars, allRentals, &totalRentals );
   };
   writeCars ( argv[2], allCars, totalCars );
   writeRentals ( argv[1],allRentals, totalRentals );
   return 0;
}

void printMenu()
{
   printf ("1	Add new car to the inventory.\n");
   printf ("2	Make a reservation.\n");
   printf ("3	Find a reservation using a renter name and print it to the screen.\n");
   printf ("4	Print all rental information to the screen.\n");
   printf ("5	Print car information to the screen of selected car.\n");
   printf ("6	Calculate and print average number of days rented.\n");
   printf ("7	Exit program.\n");
}

void handleSelection ( int choice, CarT *allCars, int *totalCars, RentalT *allRentals, int *totalRentals)
{
   double value;
	
   switch ( choice ) {
      case 1 : *totalCars = addNewCar ( allCars, *totalCars, 20 ); 
         break;
      case 2 : *totalRentals = addNewRental ( allCars, *totalCars, allRentals, *totalRentals, 60 ); 
         break;
      case 3 : handleFindReservation ( allCars, *totalCars, allRentals, *totalRentals ); 
         break;
      case 4 : printAllRentals ( allRentals, *totalRentals, allCars, *totalCars ); 
         break;
      case 5 : handlePrintCarInfo ( allCars, *totalCars ); 
         break;
      case 6 : value = getAverageRentalDays ( allRentals, *totalRentals ); 
         printf ("Average number of days cars are rented is %lf.\n", value ); 
         break;
      default : printf ("Invalid entry.");
   	
   }
   printf ("\n");
}

void handleFindReservation ( CarT *allCars, int totalCars, RentalT *allRentals, int totalRentals )
{
   int index;
   char renterName[20];
	
   do {
      printf ("Enter renter name: ");
      scanf ("%s", renterName);
   	
      index = findReservation ( allRentals, totalRentals, renterName );
   } while (index == -1);
	
   printf ("Renter:          %s\n", allRentals[index].renterName);
   printf ("Days renting:    %d\n", allRentals[index].daysRenting);
   printCarInfo ( allCars, totalCars, allRentals[index].carId );
}

void handlePrintCarInfo ( CarT *allCars, int totalCars )
{
   int carId;
	
   printf ("Enter the car ID: ");
   scanf ("%d", &carId);
	
   printCarInfo ( allCars, totalCars, carId );
}


int addNewCar ( CarT *allCars, int totalCars, int size )
{
   if (totalCars == 20)
      return 20;
		
   printf ("Enter car ID: ");
   scanf ("%d", &allCars[totalCars].carId);
   printf ("Enter make: ");
   scanf ("%s", allCars[totalCars].make);
   printf ("Enter model: ");
   scanf ("%s", allCars[totalCars].model);
   printf ("Enter number of doors (2 or 4): ");
   scanf ("%d", &allCars[totalCars].numDoors);
   printf ("Enter car rate: ");
   scanf ("%lf", &allCars[totalCars].rate);
	
   return totalCars + 1;
}

int addNewRental ( CarT *allCars,
                   int totalCars,
                   RentalT *allRentals,
			       int totalRentals, 
                   int size )
{
   char name[20];
   int carId;
	
   printf ("Enter renter name: ");
   scanf ("%s", allRentals[totalRentals].renterName);
   printf ("Enter number of days of rental: ");
   scanf ("%d", &allRentals[totalRentals].daysRenting);
	
   do {
      printf ("Enter car name (model): ");
      scanf ("%s", name);
      carId = findCarIDByName ( allCars, totalCars, name );
   } while (carId == -1);
	
   allRentals[totalRentals].carId = carId;
	
   return totalRentals + 1;
}

int findReservation ( RentalT *allRentals, 
                      int totalRentals, 
                      char *renterName )
{
   int i;
	
   for (i=0; i < totalRentals; i++ )
      if ( strcmp ( allRentals[i].renterName, renterName ) == 0 )
         return i;
	
   return -1;
}

int findCarIDByName ( CarT *allCars, 
                      int totalCars, 
                      char *carName )
{
   int i;
	
   for (i=0; i < totalCars; i++ )
      if ( strcmp ( allCars[i].make, carName ) == 0 )
         return allCars[i].carId;
	
   return -1;
}

int findCarById ( CarT *allCars, 
                  int totalCars, 
                  int carId )
{
   int i;
	
   for (i=0; i < totalCars; i++ )
      if ( allCars[i].carId == carId )
         return i;
	
   return -1;
}

void printAllRentals  (RentalT *allRentals, 
                       int totalRentals,
					   CarT *allCars,
					   int totalCars)
{
   int i;
	
   for (i=0; i < totalRentals; i++ ) {
      printf ("-------------------------------------------------------------------------\n");
      printf ("Renter:          %s\n", allRentals[i].renterName);
      printf ("Days renting:    %d\n", allRentals[i].daysRenting);
      printCarInfo ( allCars, totalCars, allRentals[i].carId );
      printf ("-------------------------------------------------------------------------\n");
      printf ("\n");
   }
}
			   
void printCarInfo ( CarT *allCars, 
                    int totalCars,
                    int carId )
{
   int i;
	
   for (i=0; i < totalCars; i++ ) {
      if ( allCars[i].carId == carId ) {
         printf ("Make:            %s\n", allCars[i].make);
         printf ("Model:           %s\n", allCars[i].model);
         printf ("Number of doors: %d\n", allCars[i].numDoors);
         printf ("Rental rate:     %lf\n", allCars[i].rate);
         return;
      }
   }
   printf ("Car info for car %d not found.\n", carId);
}
					
double getAverageRentalDays  (RentalT *allRentals, 
                              int totalRentals )
{
   int    i;
   double sum = 0.0;
	
   for (i=0; i < totalRentals; i++ ) {
      sum += allRentals[i].daysRenting;
   }
	
   return sum / totalRentals;
}


void writeRentals ( char *filename, RentalT *allRentals, int totalRentals ){
   FILE *rentals = fopen( filename, "r+" );
   int i;
   for(i=0; i< totalRentals; i++){
      fprintf( rentals, "%s %d %d", &allRentals[i].renterName,allRentals[i].daysRenting,allRentals[i].carId); 
      
    }
    fclose(rentals);
}

int readRentals (char *filename, RentalT *allRentals ){

   FILE *rentals = fopen( filename, "r+" );
   int i=0;
   
   while((fscanf( rentals, "%s %d %d", &allRentals[i].renterName,&allRentals[i].daysRenting,&allRentals[i].carId))!= EOF){
     
      
      i++;
    }
    fclose(rentals);
   return i;

}

void writeCars ( char *filename, CarT *allCars, int totalCars ){

   FILE *cars = fopen( filename, "w" );
   int i;
   for(i=0;i<totalCars;i++){
   fprintf( cars, "%d %s %s %d %.2lf\n", allCars[i].carId,&allCars[i].make, &allCars[i].model,allCars[i].numDoors, allCars[i].rate);
   
   
   }
   fclose( cars );
}

int readCars (char *filename, CarT *allCars ){
   FILE *cars = fopen( filename, "r+" );
   int i=0;
   do{
   
   fscanf( cars, "%d %s %s %d %lf", &allCars[i].carId,&allCars[i].make, &allCars[i].model,&allCars[i].numDoors,&allCars[i].rate);
   
   i++;
   }while(!feof(cars));
   fclose( cars );
   return i-1;
}
